"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[990],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(t),h=a,m=l["".concat(c,".").concat(h)]||l[h]||p[h]||s;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=l;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var d=2;d<s;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},9859:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_position:3},o="Sending transactions",i={unversionedId:"ethereum/use-cases/sending-transactions",id:"ethereum/use-cases/sending-transactions",title:"Sending transactions",description:"These requests will need to be approved by users in order to sign transactions.",source:"@site/docs/ethereum/use-cases/sending-transactions.md",sourceDirName:"ethereum/use-cases",slug:"/ethereum/use-cases/sending-transactions",permalink:"/ethereum/use-cases/sending-transactions",draft:!1,editUrl:"https://github.com/brave/brave-wallet-docs/edit/main/docs/ethereum/use-cases/sending-transactions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Connecting your site",permalink:"/ethereum/use-cases/connecting-your-site"},next:{title:"Signing data",permalink:"/ethereum/use-cases/signing-data"}},c={},d=[{value:"eth_sendTransaction",id:"eth_sendtransaction",level:2},{value:"eth_signTransaction and eth_sendRawTransaction",id:"eth_signtransaction-and-eth_sendrawtransaction",level:2}],u={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sending-transactions"},"Sending transactions"),(0,a.kt)("p",null,"These requests will need to be approved by users in order to sign transactions."),(0,a.kt)("h2",{id:"eth_sendtransaction"},"eth_sendTransaction"),(0,a.kt)("p",null,"Sites can request that a transaction be signed / sent by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"eth_sendTransaction")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"async function sendTransaction() {\n  const accounts = await window.ethereum.request({\n    id: '191',\n    method: 'eth_accounts',\n    params: [],\n  })\n  if (accounts.length === 0) {\n    console.log('No accounts allowed')\n    return\n  }\n  const from = accounts[0]\n  const params = [{\n    from,\n    // Change this to a different address\n    to: from,\n    value: '0x16345785D8A0000'\n    // data: '0x...'\n    //\n    // Gas propeties are not needed, but if you specify them,\n    // you can use either:\n    // `maxPriorityFeePerGas`\n    // `maxFeePerGas`\n    // or\n    // `gasPrice`\n  }]\n\n  return await window.ethereum.request({\n    method: 'eth_sendTransaction',\n    params\n  })\n}\nconsole.log(await sendTransaction())\n")),(0,a.kt)("p",null,"For more information, see: ",(0,a.kt)("a",{parentName:"p",href:"https://eth.wiki/json-rpc/API#eth_sendtransaction"},"https://eth.wiki/json-rpc/API#eth_sendtransaction")),(0,a.kt)("h2",{id:"eth_signtransaction-and-eth_sendrawtransaction"},"eth_signTransaction and eth_sendRawTransaction"),(0,a.kt)("p",null,"Sites can request that a transaction be signed by ",(0,a.kt)("inlineCode",{parentName:"p"},"eth_signTransaction")," method\nand send signed transaction later through ",(0,a.kt)("inlineCode",{parentName:"p"},"eth_sendRawTransaction")," or other\npreferred methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"async function signAndSendTransaction() {\n  const accounts = await window.ethereum.request({\n    id: '191',\n    method: 'eth_accounts',\n    params: [],\n  })\n  if (accounts.length === 0) {\n    console.log('No accounts allowed')\n    return\n  }\n  const from = accounts[0]\n  const params = [{\n    from,\n    // Change this to a different address\n    to: from,\n    value: '0x16345785D8A0000'\n    // data: '0x...'\n    //\n    // Gas propeties are not needed, but if you specify them,\n    // you can use either:\n    // `maxPriorityFeePerGas`\n    // `maxFeePerGas`\n    // or\n    // `gasPrice`\n  }]\n\n  const signedTransaction = await window.ethereum.request({\n    method: 'eth_signTransaction',\n    params\n  })\n\n  return await window.ethereum.request({\n    method: 'eth_sendRawTransaction,\n    params: [ signedTransaction ]\n  })\n}\nconsole.log(await signAndSendTransaction())\n")),(0,a.kt)("p",null,"For more information, see: ",(0,a.kt)("a",{parentName:"p",href:"https://eth.wiki/json-rpc/API#eth_signtransaction"},"https://eth.wiki/json-rpc/API#eth_signtransaction"),"\nand\n",(0,a.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction"},"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction")))}p.isMDXComponent=!0}}]);