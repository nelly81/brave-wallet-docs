"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[388],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var t=a(7294);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=t.createContext({}),c=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),g=c(a),m=s,u=g["".concat(l,".").concat(m)]||g[m]||p[m]||o;return a?t.createElement(u,r(r({ref:n},d),{},{components:a})):t.createElement(u,r({ref:n},d))}));function m(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=a.length,r=new Array(o);r[0]=g;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=a[c];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},8052:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(7462),s=(a(7294),a(3905));const o={sidebar_position:2},r="Methods",i={unversionedId:"solana/provider-api/methods",id:"solana/provider-api/methods",title:"Methods",description:"Compatibility",source:"@site/docs/solana/provider-api/methods.md",sourceDirName:"solana/provider-api",slug:"/solana/provider-api/methods",permalink:"/solana/provider-api/methods",draft:!1,editUrl:"https://github.com/brave/brave-wallet-docs/edit/main/docs/solana/provider-api/methods.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Brave Wallet detection",permalink:"/solana/provider-api/provider-detection"},next:{title:"properties",permalink:"/solana/provider-api/properties"}},l={},c=[{value:"Compatibility",id:"compatibility",level:2},{value:"<code>braveSolana.connect</code>",id:"bravesolanaconnect",level:2},{value:"Eagerly connect",id:"eagerly-connect",level:3},{value:"<code>braveSolana.disconnect</code>",id:"bravesolanadisconnect",level:2},{value:"<code>braveSolana.signAndSendTransaction</code>",id:"bravesolanasignandsendtransaction",level:2},{value:"<code>braveSolana.signTransaction</code> (deprecated)",id:"bravesolanasigntransaction-deprecated",level:2},{value:"<code>braveSolana.signAllTransactions</code> (deprecated)",id:"bravesolanasignalltransactions-deprecated",level:2},{value:"<code>braveSolana.signMessage</code>",id:"bravesolanasignmessage",level:2},{value:"<code>braveSolana.request</code>",id:"bravesolanarequest",level:2},{value:"<code>connect</code>",id:"connect",level:3},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"<code>signAndSendTransaction</code>",id:"signandsendtransaction",level:3},{value:"<code>signTransaction</code> (deprecated)",id:"signtransaction-deprecated",level:3},{value:"<code>signAllTransactions</code> (deprecated)",id:"signalltransactions-deprecated",level:3},{value:"<code>signMessage</code>",id:"signmessage",level:3}],d={toc:c};function p(e){let{components:n,...a}=e;return(0,s.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"methods"},"Methods"),(0,s.kt)("h2",{id:"compatibility"},"Compatibility"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"window.solana")," is an alias of ",(0,s.kt)("inlineCode",{parentName:"p"},"window.braveSolana")," which should be used mainly."),(0,s.kt)("h2",{id:"bravesolanaconnect"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.connect")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"braveSolana.connect")," is required before calling other methods. First time calling\nconnect will prompt users to grant permission for current selected account and\nthe permission will be stored in ",(0,s.kt)("inlineCode",{parentName:"p"},"brave://settings/content/solana"),". Subsequent\ncalls won't ask for permission again if granted permission is still in\ncontent settings. Note that having granted permission doesn't mean a dApp\nis connected, a website still need to call ",(0,s.kt)("inlineCode",{parentName:"p"},"braveSolana.connect")," when disconnected."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface ConnectOptions {\n  // Eagerly connect\n  onlyIfTrusted?: boolean\n}\nbraveSolana.connect(options?: ConnectOptions) : Promise<{ publicKey: solanaWeb3.PublicKey }>\n")),(0,s.kt)("p",null,"When a connect succeeds,\n",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/PublicKey.html"},"solanaWeb3.PublicKey"),"\nobject will be returned, otherwise the promise will be rejected with error."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const result = await window.braveSolana.connect();\n// BrG44HdsEhzapvs8bEqzvkq4egwevS3fRE6ze2ENo6S8\nconsole.log(result.publicKey.ToString());\n")),(0,s.kt)("h3",{id:"eagerly-connect"},"Eagerly connect"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// eagerly connect\nbraveSolana.connect({ onlyIfTrusted: true }) : Promise<{ publicKey: solanaWeb3.PublicKey }>\n")),(0,s.kt)("p",null,"When an optional ",(0,s.kt)("inlineCode",{parentName:"p"},"{ onlyIfTrusted: true }")," is provided, that means a website\nwants to eagerly connect, which means connect request will be rejected\nautomatically when it doesn't have previously granted permission or the wallet\nis locked."),(0,s.kt)("h2",{id:"bravesolanadisconnect"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.disconnect")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"braveSolana.disconnect")," will set state of the site to be disconnected for the\nselected account. Note that it won't remove the granted permission in content\nsettings."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"braveSolana.disconnect() : Promise<undefined>\n")),(0,s.kt)("h2",{id:"bravesolanasignandsendtransaction"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.signAndSendTransaction")),(0,s.kt)("p",null,"This API will sign the transaction with private key of the selected account and\nsubmit it using Solana JSON RPC. It takes a\n",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction"),"\nand an optional ",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/modules.html#SendOptions"},"solanaWeb3.SendOptions")," parameter\n, and return a promise containing a public key and a signature."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean,\n  /** preflight commitment level */\n  preflightCommitment?: string, // 'processed' | 'confirmed' | 'finalized'\n  /** Maximum number of times for the RPC node to retry sending the\n    transaction to the leader. */\n  maxRetries?: number;\n}\nbraveSolana.signAndSendTransaction(solanaWeb3.Transaction, options?: SendOptions)\n : Promise<{publicKey: <base58 encoded string>,\n            signature: <base58 encoded string>}>\n")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const NETWORK = clusterApiUrl(\"testnet\");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const result = await window.braveSolana.signAndSendTransaction(transaction,\n      {maxRetries: 5, preflightCommitment: 'finalized', skipPreflight: false} // optional\n      );\n  // BrG44HdsEhzapvs8bEqzvkq4egwevS3fRE6ze2ENo6S8\n  console.log(result.publicKey);\n  await connection.confirmTransaction(result.signature);\n} catch (err) {\n  // { code: 4001, message: 'User rejected the request.' }\n}\n")),(0,s.kt)("h2",{id:"bravesolanasigntransaction-deprecated"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.signTransaction")," (deprecated)"),(0,s.kt)("p",null,"This API allows a website to sign a transaction and submit it later.\nIt takes a\n",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction"),"\nand return a promise containing a\n",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"braveSolana.signTransaction(solanaWeb3.Transaction) : Promise<solanaWeb3.Transaction>\n")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const NETWORK = clusterApiUrl(\"testnet\");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const signedTransaction = await window.braveSolana.signTransaction(transaction);\n  const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n} catch (err) {\n  // { code: 4001, message: 'User rejected the request.' }\n}\n")),(0,s.kt)("admonition",{title:"Deprecated API",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"This API is deprecated but is available in Brave Wallet.")),(0,s.kt)("h2",{id:"bravesolanasignalltransactions-deprecated"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.signAllTransactions")," (deprecated)"),(0,s.kt)("p",null,"This API allows a website to sign some transactions and submit them later.\nIt takes an array of\n",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction"),"\nand return a promise containing an array of\n",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"braveSolana.signTransaction(solanaWeb3.Transaction[]) : Promise<solanaWeb3.Transaction[]>\n")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const NETWORK = clusterApiUrl(\"testnet\");\nconst connection = new Connection(NETWORK);\nconst transaction1 = new Transaction();\nconst transaction2 = new Transaction();\ntry {\n  const signedTransactions = await window.braveSolana.signTransaction([transaction1, transaction2]);\n  signedTransactions.forEach(signedTransaction => {\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize())});\n} catch (err) {\n  // { code: 4001, message: 'User rejected the request.' }\n}\n")),(0,s.kt)("admonition",{title:"Deprecated API",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"This API is deprecated but is available in Brave Wallet.")),(0,s.kt)("h2",{id:"bravesolanasignmessage"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.signMessage")),(0,s.kt)("p",null,"Allows a website to sign a message using the selected account. If we detect the\nmessage payload to be signed is a transaction, we will reject the request\nautomatically.\nThis API takes ",(0,s.kt)("strong",{parentName:"p"},"Uint8Array")," with an optional encoding (",(0,s.kt)("strong",{parentName:"p"},"hex")," or ",(0,s.kt)("strong",{parentName:"p"},"utf8"),") to\ndisplay the message to users. If a caller doesn't specify encoding, default\nwould be utf8."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"braveSolana.signMessage(Uint8Array, string?) : Promise({ publicKey: <solanaWeb3.PublicKey>,\n                                                    signature: <Uint8Array> })\n")),(0,s.kt)("p",null," Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const encodedMessage = new TextEncoder().encode(\'signMessage test\');\n// signedMessage1 === signedMessage2 === signedMessage3\nconst signedMessage1 = await window.braveSolana.signMessage(encodedMessage);\nconst signedMessage2 = await window.braveSolana.signMessage(encodedMessage, "utf8");\nconst signedMessage2 = await window.braveSolana.signMessage(encodedMessage, "hex");\n')),(0,s.kt)("h2",{id:"bravesolanarequest"},(0,s.kt)("inlineCode",{parentName:"h2"},"braveSolana.request")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"request")," API allow a website to call above methods with a universal\ninterface. Note input and output might be different for some methods,\nex. signTransaction."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"braveSolana.request({ method: <string>,\n                 parms: {...}}) : Promise<{...}>\n")),(0,s.kt)("h3",{id:"connect"},(0,s.kt)("inlineCode",{parentName:"h3"},"connect")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"params")," is optional for connect."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'braveSolana.request({ method: "connect" })\n : Promise<{ publicKey: solanaWeb3.PublicKey}>\n// eagerly connect\nbraveSolana.request({ method: "connect", params: { onlyIfTrusted : true }})\n : Promise<{ publicKey: solanaWeb3.PublicKey}>\n')),(0,s.kt)("h3",{id:"disconnect"},(0,s.kt)("inlineCode",{parentName:"h3"},"disconnect")),(0,s.kt)("p",null,"disconnect does not need ",(0,s.kt)("inlineCode",{parentName:"p"},"params")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'braveSolana.request({ method: "disconnect" }) : Promise<{}>\n')),(0,s.kt)("h3",{id:"signandsendtransaction"},(0,s.kt)("inlineCode",{parentName:"h3"},"signAndSendTransaction")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"params")," is required and websites must specify base58 encode of\n",(0,s.kt)("inlineCode",{parentName:"p"},"serializeMessage")," of ",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction"),".\nOptional ",(0,s.kt)("inlineCode",{parentName:"p"},"options")," of type ",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/modules.html#SendOptions"},"solanaWeb3.SendOptions")," can be specified in ",(0,s.kt)("inlineCode",{parentName:"p"},"param"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"signature")," in return promise is base58 encoded signature, it is also the\nconfirmed block hash."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'braveSolana.request({method: "signAndSendTransaction",\n                params: { message: <base58 encoded string> }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string>}>\n')),(0,s.kt)("p",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const bs58 = require("bs58");\nconst NETWORK = clusterApiUrl("testnet");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const result = await window.braveSolana.request({\n    method: "signAndSendTransaction",\n    params: {\n      message: bs58.encode(transaction.serializeMessage()),\n      options: {maxRetries: 5, preflightCommitment: \'finalized\', skipPreflight: false}  // optional\n    }\n  });\n  // BrG44HdsEhzapvs8bEqzvkq4egwevS3fRE6ze2ENo6S8\n  console.log(result.publicKey);\n  await connection.confirmTransaction(result.signature);\n} catch (err) {\n  // { code: 4001, message: \'User rejected the request.\' }\n}\n')),(0,s.kt)("h3",{id:"signtransaction-deprecated"},(0,s.kt)("inlineCode",{parentName:"h3"},"signTransaction")," (deprecated)"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"params")," is required and websites must specify base58 encode of\n",(0,s.kt)("inlineCode",{parentName:"p"},"serializeMessage")," of ",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"signature")," in return promise is base58 encoded signature."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'braveSolana.request({method: "signTransaction",\n                params: { message: <base58 encoded string> }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string> }>\n')),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const bs58 = require("bs58");\nconst NETWORK = clusterApiUrl("testnet");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const signedTransaction = await window.braveSolana.request({\n    method: "signTransaction"\n    params: { message: bs58.encode(transaction.serializeMessage()) }\n  });\n  console.log(\'signature: \' + signedTransaction.signature);\n} catch (err) {\n  // { code: 4001, message: \'User rejected the request.\' }\n}\n')),(0,s.kt)("admonition",{title:"Deprecated API",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"This API is deprecated but is available in Brave Wallet.")),(0,s.kt)("h3",{id:"signalltransactions-deprecated"},(0,s.kt)("inlineCode",{parentName:"h3"},"signAllTransactions")," (deprecated)"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"params")," is required and websites must specify an array of base58 encode of\n",(0,s.kt)("inlineCode",{parentName:"p"},"serializeMessage")," of ",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Transaction.html"},"solanaWeb3.Transaction"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"signature")," in return promise is an array of base58 encoded signatures.\nNote that all of the transacion must be the same signer, otherwise request will\nbe rejected."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'braveSolana.request({method: "signAllTransactions",\n                params: { message: <base58 encoded string>[] }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string>[] }>\n')),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const bs58 = require("bs58");\nconst NETWORK = clusterApiUrl("testnet");\nconst connection = new Connection(NETWORK);\nconst transaction1 = new Transaction();\nconst transaction2 = new Transaction();\nconst transactions = [transaction1, transaction2];\nconst message = transactions.map((transaction) => {\n    return bs58.encode(transaction.serializeMessage());\n});\ntry {\n  const signedTransactions = await window.braveSolana.request({\n    method: "signAllTransactions"\n    params: { message }\n  })\n  signedTransactions.signature.forEach((signedTransaction) => {\n    console.log(\'signature: \' + signedTransaction);\n  });\n} catch (err) {\n  // { code: 4001, message: \'User rejected the request.\' }\n}\n')),(0,s.kt)("admonition",{title:"Deprecated API",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"This API is deprecated but is available in Brave Wallet.")),(0,s.kt)("h3",{id:"signmessage"},(0,s.kt)("inlineCode",{parentName:"h3"},"signMessage")),(0,s.kt)("p",null,"A website must specify ",(0,s.kt)("strong",{parentName:"p"},"Uint8Array")," to be signed in ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"params"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"display")," is optional for display encoding to users,\nit only accepts ",(0,s.kt)("strong",{parentName:"p"},"hex")," or ",(0,s.kt)("strong",{parentName:"p"},"utf8"),"  (default: ",(0,s.kt)("strong",{parentName:"p"},"utf8"),").\n",(0,s.kt)("inlineCode",{parentName:"p"},"signature")," in returned promise is base58 encoded of signature byte array."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'braveSolana.request({method: "signMessage",\n                params: { message: Uint8Array, params?: <string> }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string> }>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},' const encodedMessage = new TextEncoder().encode(\'signMessage test\')\n // signedMessage1 === signedMessage2 === signedMessage3\n const signedMessage1 = await window.braveSolana.request({\n   method: "signMessage",\n   params: {message: encodedMessage}\n  });\n const signedMessage2 = await window.braveSolana.request({\n   method: "signMessage",\n   params: {message: encodedMessage, display: "utf8"}\n  });\n const signedMessage3 = await window.braveSolana.request({\n   method: "signMessage",\n   params: {message: encodedMessage, display: "hex"}\n  });\n')))}p.isMDXComponent=!0}}]);